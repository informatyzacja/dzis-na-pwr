// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String       @id @default(cuid())
  name        String
  description String?
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  startsAt    DateTime
  endsAt      DateTime?
  location    String?
  logoUrl     String?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  isPublic    Boolean      @default(true)
  AgendaItem  AgendaItem[]
}

model AgendaItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
}

enum Role {
  ADMIN
  TEAM_OWNER
  TEAM_MEMBER
  USER
}

model Team {
  id         String       @id @default(cuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  logoUrl    String?
  slug       String       @unique
  UsersTeams UsersTeams[]
  Event      Event[]
}

model UsersTeams {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role   Role   @default(TEAM_MEMBER)
}

// necessary for next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  surname       String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UsersTeams    UsersTeams[]
  Event         Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
